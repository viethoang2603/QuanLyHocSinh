#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BUS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLHS")]
	public partial class SQL_QUANLYHOCSINHDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBANGDIEMMON(BANGDIEMMON instance);
    partial void UpdateBANGDIEMMON(BANGDIEMMON instance);
    partial void DeleteBANGDIEMMON(BANGDIEMMON instance);
    partial void InsertBAOCAOTONGKETHK(BAOCAOTONGKETHK instance);
    partial void UpdateBAOCAOTONGKETHK(BAOCAOTONGKETHK instance);
    partial void DeleteBAOCAOTONGKETHK(BAOCAOTONGKETHK instance);
    partial void InsertCT_BCTKMON(CT_BCTKMON instance);
    partial void UpdateCT_BCTKMON(CT_BCTKMON instance);
    partial void DeleteCT_BCTKMON(CT_BCTKMON instance);
    partial void InsertBAOCAOTONGKETMON(BAOCAOTONGKETMON instance);
    partial void UpdateBAOCAOTONGKETMON(BAOCAOTONGKETMON instance);
    partial void DeleteBAOCAOTONGKETMON(BAOCAOTONGKETMON instance);
    partial void InsertCT_DIEMMON(CT_DIEMMON instance);
    partial void UpdateCT_DIEMMON(CT_DIEMMON instance);
    partial void DeleteCT_DIEMMON(CT_DIEMMON instance);
    partial void InsertHOCKY(HOCKY instance);
    partial void UpdateHOCKY(HOCKY instance);
    partial void DeleteHOCKY(HOCKY instance);
    partial void InsertHOCSINH(HOCSINH instance);
    partial void UpdateHOCSINH(HOCSINH instance);
    partial void DeleteHOCSINH(HOCSINH instance);
    partial void InsertKHOILOP(KHOILOP instance);
    partial void UpdateKHOILOP(KHOILOP instance);
    partial void DeleteKHOILOP(KHOILOP instance);
    partial void InsertLOAIHINHKIEMTRA(LOAIHINHKIEMTRA instance);
    partial void UpdateLOAIHINHKIEMTRA(LOAIHINHKIEMTRA instance);
    partial void DeleteLOAIHINHKIEMTRA(LOAIHINHKIEMTRA instance);
    partial void InsertLOP(LOP instance);
    partial void UpdateLOP(LOP instance);
    partial void DeleteLOP(LOP instance);
    partial void InsertMONHOC(MONHOC instance);
    partial void UpdateMONHOC(MONHOC instance);
    partial void DeleteMONHOC(MONHOC instance);
    partial void InsertNAMHOC(NAMHOC instance);
    partial void UpdateNAMHOC(NAMHOC instance);
    partial void DeleteNAMHOC(NAMHOC instance);
    partial void InsertQUATRINHHOC(QUATRINHHOC instance);
    partial void UpdateQUATRINHHOC(QUATRINHHOC instance);
    partial void DeleteQUATRINHHOC(QUATRINHHOC instance);
    partial void InsertTHAMSO(THAMSO instance);
    partial void UpdateTHAMSO(THAMSO instance);
    partial void DeleteTHAMSO(THAMSO instance);
    #endregion
		
		public SQL_QUANLYHOCSINHDataContext() : 
				base(global::BUS.Properties.Settings.Default.QLHSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQL_QUANLYHOCSINHDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQL_QUANLYHOCSINHDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQL_QUANLYHOCSINHDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQL_QUANLYHOCSINHDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BANGDIEMMON> BANGDIEMMONs
		{
			get
			{
				return this.GetTable<BANGDIEMMON>();
			}
		}
		
		public System.Data.Linq.Table<BAOCAOTONGKETHK> BAOCAOTONGKETHKs
		{
			get
			{
				return this.GetTable<BAOCAOTONGKETHK>();
			}
		}
		
		public System.Data.Linq.Table<CT_BCTKMON> CT_BCTKMONs
		{
			get
			{
				return this.GetTable<CT_BCTKMON>();
			}
		}
		
		public System.Data.Linq.Table<BAOCAOTONGKETMON> BAOCAOTONGKETMONs
		{
			get
			{
				return this.GetTable<BAOCAOTONGKETMON>();
			}
		}
		
		public System.Data.Linq.Table<CT_DIEMMON> CT_DIEMMONs
		{
			get
			{
				return this.GetTable<CT_DIEMMON>();
			}
		}
		
		public System.Data.Linq.Table<HOCKY> HOCKies
		{
			get
			{
				return this.GetTable<HOCKY>();
			}
		}
		
		public System.Data.Linq.Table<HOCSINH> HOCSINHs
		{
			get
			{
				return this.GetTable<HOCSINH>();
			}
		}
		
		public System.Data.Linq.Table<KHOILOP> KHOILOPs
		{
			get
			{
				return this.GetTable<KHOILOP>();
			}
		}
		
		public System.Data.Linq.Table<LOAIHINHKIEMTRA> LOAIHINHKIEMTRAs
		{
			get
			{
				return this.GetTable<LOAIHINHKIEMTRA>();
			}
		}
		
		public System.Data.Linq.Table<LOP> LOPs
		{
			get
			{
				return this.GetTable<LOP>();
			}
		}
		
		public System.Data.Linq.Table<MONHOC> MONHOCs
		{
			get
			{
				return this.GetTable<MONHOC>();
			}
		}
		
		public System.Data.Linq.Table<NAMHOC> NAMHOCs
		{
			get
			{
				return this.GetTable<NAMHOC>();
			}
		}
		
		public System.Data.Linq.Table<QUATRINHHOC> QUATRINHHOCs
		{
			get
			{
				return this.GetTable<QUATRINHHOC>();
			}
		}
		
		public System.Data.Linq.Table<THAMSO> THAMSOs
		{
			get
			{
				return this.GetTable<THAMSO>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_XoathongtinHocSinh")]
		public int sp_XoathongtinHocSinh([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string mahs)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mahs);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BANGDIEMMON")]
	public partial class BANGDIEMMON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MABANGDIEMMON;
		
		private string _MAQTHOC;
		
		private string _MAMONHOC;
		
		private System.Nullable<float> _DIEMTB;
		
		private EntitySet<CT_DIEMMON> _CT_DIEMMONs;
		
		private EntityRef<MONHOC> _MONHOC;
		
		private EntityRef<QUATRINHHOC> _QUATRINHHOC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMABANGDIEMMONChanging(string value);
    partial void OnMABANGDIEMMONChanged();
    partial void OnMAQTHOCChanging(string value);
    partial void OnMAQTHOCChanged();
    partial void OnMAMONHOCChanging(string value);
    partial void OnMAMONHOCChanged();
    partial void OnDIEMTBChanging(System.Nullable<float> value);
    partial void OnDIEMTBChanged();
    #endregion
		
		public BANGDIEMMON()
		{
			this._CT_DIEMMONs = new EntitySet<CT_DIEMMON>(new Action<CT_DIEMMON>(this.attach_CT_DIEMMONs), new Action<CT_DIEMMON>(this.detach_CT_DIEMMONs));
			this._MONHOC = default(EntityRef<MONHOC>);
			this._QUATRINHHOC = default(EntityRef<QUATRINHHOC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MABANGDIEMMON", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MABANGDIEMMON
		{
			get
			{
				return this._MABANGDIEMMON;
			}
			set
			{
				if ((this._MABANGDIEMMON != value))
				{
					this.OnMABANGDIEMMONChanging(value);
					this.SendPropertyChanging();
					this._MABANGDIEMMON = value;
					this.SendPropertyChanged("MABANGDIEMMON");
					this.OnMABANGDIEMMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAQTHOC", DbType="NVarChar(50)")]
		public string MAQTHOC
		{
			get
			{
				return this._MAQTHOC;
			}
			set
			{
				if ((this._MAQTHOC != value))
				{
					if (this._QUATRINHHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAQTHOCChanging(value);
					this.SendPropertyChanging();
					this._MAQTHOC = value;
					this.SendPropertyChanged("MAQTHOC");
					this.OnMAQTHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMONHOC", DbType="NVarChar(50)")]
		public string MAMONHOC
		{
			get
			{
				return this._MAMONHOC;
			}
			set
			{
				if ((this._MAMONHOC != value))
				{
					if (this._MONHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAMONHOCChanging(value);
					this.SendPropertyChanging();
					this._MAMONHOC = value;
					this.SendPropertyChanged("MAMONHOC");
					this.OnMAMONHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIEMTB", DbType="Real")]
		public System.Nullable<float> DIEMTB
		{
			get
			{
				return this._DIEMTB;
			}
			set
			{
				if ((this._DIEMTB != value))
				{
					this.OnDIEMTBChanging(value);
					this.SendPropertyChanging();
					this._DIEMTB = value;
					this.SendPropertyChanged("DIEMTB");
					this.OnDIEMTBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BANGDIEMMON_CT_DIEMMON", Storage="_CT_DIEMMONs", ThisKey="MABANGDIEMMON", OtherKey="MABANGDIEMMON")]
		public EntitySet<CT_DIEMMON> CT_DIEMMONs
		{
			get
			{
				return this._CT_DIEMMONs;
			}
			set
			{
				this._CT_DIEMMONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_BANGDIEMMON", Storage="_MONHOC", ThisKey="MAMONHOC", OtherKey="MAMONHOC", IsForeignKey=true)]
		public MONHOC MONHOC
		{
			get
			{
				return this._MONHOC.Entity;
			}
			set
			{
				MONHOC previousValue = this._MONHOC.Entity;
				if (((previousValue != value) 
							|| (this._MONHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MONHOC.Entity = null;
						previousValue.BANGDIEMMONs.Remove(this);
					}
					this._MONHOC.Entity = value;
					if ((value != null))
					{
						value.BANGDIEMMONs.Add(this);
						this._MAMONHOC = value.MAMONHOC;
					}
					else
					{
						this._MAMONHOC = default(string);
					}
					this.SendPropertyChanged("MONHOC");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUATRINHHOC_BANGDIEMMON", Storage="_QUATRINHHOC", ThisKey="MAQTHOC", OtherKey="MAQTHOC", IsForeignKey=true)]
		public QUATRINHHOC QUATRINHHOC
		{
			get
			{
				return this._QUATRINHHOC.Entity;
			}
			set
			{
				QUATRINHHOC previousValue = this._QUATRINHHOC.Entity;
				if (((previousValue != value) 
							|| (this._QUATRINHHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QUATRINHHOC.Entity = null;
						previousValue.BANGDIEMMONs.Remove(this);
					}
					this._QUATRINHHOC.Entity = value;
					if ((value != null))
					{
						value.BANGDIEMMONs.Add(this);
						this._MAQTHOC = value.MAQTHOC;
					}
					else
					{
						this._MAQTHOC = default(string);
					}
					this.SendPropertyChanged("QUATRINHHOC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CT_DIEMMONs(CT_DIEMMON entity)
		{
			this.SendPropertyChanging();
			entity.BANGDIEMMON = this;
		}
		
		private void detach_CT_DIEMMONs(CT_DIEMMON entity)
		{
			this.SendPropertyChanging();
			entity.BANGDIEMMON = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BAOCAOTONGKETHK")]
	public partial class BAOCAOTONGKETHK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAHK;
		
		private string _MALOP;
		
		private System.Nullable<int> _SOLUONGDAT;
		
		private System.Nullable<float> _TYLE;
		
		private EntityRef<HOCKY> _HOCKY;
		
		private EntityRef<LOP> _LOP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAHKChanging(string value);
    partial void OnMAHKChanged();
    partial void OnMALOPChanging(string value);
    partial void OnMALOPChanged();
    partial void OnSOLUONGDATChanging(System.Nullable<int> value);
    partial void OnSOLUONGDATChanged();
    partial void OnTYLEChanging(System.Nullable<float> value);
    partial void OnTYLEChanged();
    #endregion
		
		public BAOCAOTONGKETHK()
		{
			this._HOCKY = default(EntityRef<HOCKY>);
			this._LOP = default(EntityRef<LOP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHK", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAHK
		{
			get
			{
				return this._MAHK;
			}
			set
			{
				if ((this._MAHK != value))
				{
					if (this._HOCKY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAHKChanging(value);
					this.SendPropertyChanging();
					this._MAHK = value;
					this.SendPropertyChanged("MAHK");
					this.OnMAHKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					if (this._LOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOLUONGDAT", DbType="Int")]
		public System.Nullable<int> SOLUONGDAT
		{
			get
			{
				return this._SOLUONGDAT;
			}
			set
			{
				if ((this._SOLUONGDAT != value))
				{
					this.OnSOLUONGDATChanging(value);
					this.SendPropertyChanging();
					this._SOLUONGDAT = value;
					this.SendPropertyChanged("SOLUONGDAT");
					this.OnSOLUONGDATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYLE", DbType="Real")]
		public System.Nullable<float> TYLE
		{
			get
			{
				return this._TYLE;
			}
			set
			{
				if ((this._TYLE != value))
				{
					this.OnTYLEChanging(value);
					this.SendPropertyChanging();
					this._TYLE = value;
					this.SendPropertyChanged("TYLE");
					this.OnTYLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKY_BAOCAOTONGKETHK", Storage="_HOCKY", ThisKey="MAHK", OtherKey="MAHK", IsForeignKey=true)]
		public HOCKY HOCKY
		{
			get
			{
				return this._HOCKY.Entity;
			}
			set
			{
				HOCKY previousValue = this._HOCKY.Entity;
				if (((previousValue != value) 
							|| (this._HOCKY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOCKY.Entity = null;
						previousValue.BAOCAOTONGKETHKs.Remove(this);
					}
					this._HOCKY.Entity = value;
					if ((value != null))
					{
						value.BAOCAOTONGKETHKs.Add(this);
						this._MAHK = value.MAHK;
					}
					else
					{
						this._MAHK = default(string);
					}
					this.SendPropertyChanged("HOCKY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_BAOCAOTONGKETHK", Storage="_LOP", ThisKey="MALOP", OtherKey="MALOP", IsForeignKey=true)]
		public LOP LOP
		{
			get
			{
				return this._LOP.Entity;
			}
			set
			{
				LOP previousValue = this._LOP.Entity;
				if (((previousValue != value) 
							|| (this._LOP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOP.Entity = null;
						previousValue.BAOCAOTONGKETHKs.Remove(this);
					}
					this._LOP.Entity = value;
					if ((value != null))
					{
						value.BAOCAOTONGKETHKs.Add(this);
						this._MALOP = value.MALOP;
					}
					else
					{
						this._MALOP = default(string);
					}
					this.SendPropertyChanged("LOP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CT_BCTKMON")]
	public partial class CT_BCTKMON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MABCTKMON;
		
		private string _MALOP;
		
		private System.Nullable<int> _SOLUONGDAT;
		
		private System.Nullable<float> _TYLE;
		
		private EntityRef<BAOCAOTONGKETMON> _BAOCAOTONGKETMON;
		
		private EntityRef<LOP> _LOP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMABCTKMONChanging(string value);
    partial void OnMABCTKMONChanged();
    partial void OnMALOPChanging(string value);
    partial void OnMALOPChanged();
    partial void OnSOLUONGDATChanging(System.Nullable<int> value);
    partial void OnSOLUONGDATChanged();
    partial void OnTYLEChanging(System.Nullable<float> value);
    partial void OnTYLEChanged();
    #endregion
		
		public CT_BCTKMON()
		{
			this._BAOCAOTONGKETMON = default(EntityRef<BAOCAOTONGKETMON>);
			this._LOP = default(EntityRef<LOP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MABCTKMON", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MABCTKMON
		{
			get
			{
				return this._MABCTKMON;
			}
			set
			{
				if ((this._MABCTKMON != value))
				{
					if (this._BAOCAOTONGKETMON.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMABCTKMONChanging(value);
					this.SendPropertyChanging();
					this._MABCTKMON = value;
					this.SendPropertyChanged("MABCTKMON");
					this.OnMABCTKMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					if (this._LOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOLUONGDAT", DbType="Int")]
		public System.Nullable<int> SOLUONGDAT
		{
			get
			{
				return this._SOLUONGDAT;
			}
			set
			{
				if ((this._SOLUONGDAT != value))
				{
					this.OnSOLUONGDATChanging(value);
					this.SendPropertyChanging();
					this._SOLUONGDAT = value;
					this.SendPropertyChanged("SOLUONGDAT");
					this.OnSOLUONGDATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYLE", DbType="Real")]
		public System.Nullable<float> TYLE
		{
			get
			{
				return this._TYLE;
			}
			set
			{
				if ((this._TYLE != value))
				{
					this.OnTYLEChanging(value);
					this.SendPropertyChanging();
					this._TYLE = value;
					this.SendPropertyChanged("TYLE");
					this.OnTYLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BAOCAOTONGKETMON_CT_BCTKMON", Storage="_BAOCAOTONGKETMON", ThisKey="MABCTKMON", OtherKey="MABCTKMON", IsForeignKey=true)]
		public BAOCAOTONGKETMON BAOCAOTONGKETMON
		{
			get
			{
				return this._BAOCAOTONGKETMON.Entity;
			}
			set
			{
				BAOCAOTONGKETMON previousValue = this._BAOCAOTONGKETMON.Entity;
				if (((previousValue != value) 
							|| (this._BAOCAOTONGKETMON.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BAOCAOTONGKETMON.Entity = null;
						previousValue.CT_BCTKMONs.Remove(this);
					}
					this._BAOCAOTONGKETMON.Entity = value;
					if ((value != null))
					{
						value.CT_BCTKMONs.Add(this);
						this._MABCTKMON = value.MABCTKMON;
					}
					else
					{
						this._MABCTKMON = default(string);
					}
					this.SendPropertyChanged("BAOCAOTONGKETMON");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_CT_BCTKMON", Storage="_LOP", ThisKey="MALOP", OtherKey="MALOP", IsForeignKey=true)]
		public LOP LOP
		{
			get
			{
				return this._LOP.Entity;
			}
			set
			{
				LOP previousValue = this._LOP.Entity;
				if (((previousValue != value) 
							|| (this._LOP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOP.Entity = null;
						previousValue.CT_BCTKMONs.Remove(this);
					}
					this._LOP.Entity = value;
					if ((value != null))
					{
						value.CT_BCTKMONs.Add(this);
						this._MALOP = value.MALOP;
					}
					else
					{
						this._MALOP = default(string);
					}
					this.SendPropertyChanged("LOP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BAOCAOTONGKETMON")]
	public partial class BAOCAOTONGKETMON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MABCTKMON;
		
		private string _MAMONHOC;
		
		private string _MAHOCKY;
		
		private EntitySet<CT_BCTKMON> _CT_BCTKMONs;
		
		private EntityRef<HOCKY> _HOCKY;
		
		private EntityRef<MONHOC> _MONHOC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMABCTKMONChanging(string value);
    partial void OnMABCTKMONChanged();
    partial void OnMAMONHOCChanging(string value);
    partial void OnMAMONHOCChanged();
    partial void OnMAHOCKYChanging(string value);
    partial void OnMAHOCKYChanged();
    #endregion
		
		public BAOCAOTONGKETMON()
		{
			this._CT_BCTKMONs = new EntitySet<CT_BCTKMON>(new Action<CT_BCTKMON>(this.attach_CT_BCTKMONs), new Action<CT_BCTKMON>(this.detach_CT_BCTKMONs));
			this._HOCKY = default(EntityRef<HOCKY>);
			this._MONHOC = default(EntityRef<MONHOC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MABCTKMON", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MABCTKMON
		{
			get
			{
				return this._MABCTKMON;
			}
			set
			{
				if ((this._MABCTKMON != value))
				{
					this.OnMABCTKMONChanging(value);
					this.SendPropertyChanging();
					this._MABCTKMON = value;
					this.SendPropertyChanged("MABCTKMON");
					this.OnMABCTKMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMONHOC", DbType="NVarChar(50)")]
		public string MAMONHOC
		{
			get
			{
				return this._MAMONHOC;
			}
			set
			{
				if ((this._MAMONHOC != value))
				{
					if (this._MONHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAMONHOCChanging(value);
					this.SendPropertyChanging();
					this._MAMONHOC = value;
					this.SendPropertyChanged("MAMONHOC");
					this.OnMAMONHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHOCKY", DbType="NVarChar(50)")]
		public string MAHOCKY
		{
			get
			{
				return this._MAHOCKY;
			}
			set
			{
				if ((this._MAHOCKY != value))
				{
					if (this._HOCKY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAHOCKYChanging(value);
					this.SendPropertyChanging();
					this._MAHOCKY = value;
					this.SendPropertyChanged("MAHOCKY");
					this.OnMAHOCKYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BAOCAOTONGKETMON_CT_BCTKMON", Storage="_CT_BCTKMONs", ThisKey="MABCTKMON", OtherKey="MABCTKMON")]
		public EntitySet<CT_BCTKMON> CT_BCTKMONs
		{
			get
			{
				return this._CT_BCTKMONs;
			}
			set
			{
				this._CT_BCTKMONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKY_BAOCAOTONGKETMON", Storage="_HOCKY", ThisKey="MAHOCKY", OtherKey="MAHK", IsForeignKey=true)]
		public HOCKY HOCKY
		{
			get
			{
				return this._HOCKY.Entity;
			}
			set
			{
				HOCKY previousValue = this._HOCKY.Entity;
				if (((previousValue != value) 
							|| (this._HOCKY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOCKY.Entity = null;
						previousValue.BAOCAOTONGKETMONs.Remove(this);
					}
					this._HOCKY.Entity = value;
					if ((value != null))
					{
						value.BAOCAOTONGKETMONs.Add(this);
						this._MAHOCKY = value.MAHK;
					}
					else
					{
						this._MAHOCKY = default(string);
					}
					this.SendPropertyChanged("HOCKY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_BAOCAOTONGKETMON", Storage="_MONHOC", ThisKey="MAMONHOC", OtherKey="MAMONHOC", IsForeignKey=true)]
		public MONHOC MONHOC
		{
			get
			{
				return this._MONHOC.Entity;
			}
			set
			{
				MONHOC previousValue = this._MONHOC.Entity;
				if (((previousValue != value) 
							|| (this._MONHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MONHOC.Entity = null;
						previousValue.BAOCAOTONGKETMONs.Remove(this);
					}
					this._MONHOC.Entity = value;
					if ((value != null))
					{
						value.BAOCAOTONGKETMONs.Add(this);
						this._MAMONHOC = value.MAMONHOC;
					}
					else
					{
						this._MAMONHOC = default(string);
					}
					this.SendPropertyChanged("MONHOC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CT_BCTKMONs(CT_BCTKMON entity)
		{
			this.SendPropertyChanging();
			entity.BAOCAOTONGKETMON = this;
		}
		
		private void detach_CT_BCTKMONs(CT_BCTKMON entity)
		{
			this.SendPropertyChanging();
			entity.BAOCAOTONGKETMON = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CT_DIEMMON")]
	public partial class CT_DIEMMON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MABANGDIEMMON;
		
		private string _MALHKT;
		
		private System.Nullable<float> _DIEM;
		
		private EntityRef<BANGDIEMMON> _BANGDIEMMON;
		
		private EntityRef<LOAIHINHKIEMTRA> _LOAIHINHKIEMTRA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMABANGDIEMMONChanging(string value);
    partial void OnMABANGDIEMMONChanged();
    partial void OnMALHKTChanging(string value);
    partial void OnMALHKTChanged();
    partial void OnDIEMChanging(System.Nullable<float> value);
    partial void OnDIEMChanged();
    #endregion
		
		public CT_DIEMMON()
		{
			this._BANGDIEMMON = default(EntityRef<BANGDIEMMON>);
			this._LOAIHINHKIEMTRA = default(EntityRef<LOAIHINHKIEMTRA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MABANGDIEMMON", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MABANGDIEMMON
		{
			get
			{
				return this._MABANGDIEMMON;
			}
			set
			{
				if ((this._MABANGDIEMMON != value))
				{
					if (this._BANGDIEMMON.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMABANGDIEMMONChanging(value);
					this.SendPropertyChanging();
					this._MABANGDIEMMON = value;
					this.SendPropertyChanged("MABANGDIEMMON");
					this.OnMABANGDIEMMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALHKT", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALHKT
		{
			get
			{
				return this._MALHKT;
			}
			set
			{
				if ((this._MALHKT != value))
				{
					if (this._LOAIHINHKIEMTRA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMALHKTChanging(value);
					this.SendPropertyChanging();
					this._MALHKT = value;
					this.SendPropertyChanged("MALHKT");
					this.OnMALHKTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIEM", DbType="Real")]
		public System.Nullable<float> DIEM
		{
			get
			{
				return this._DIEM;
			}
			set
			{
				if ((this._DIEM != value))
				{
					this.OnDIEMChanging(value);
					this.SendPropertyChanging();
					this._DIEM = value;
					this.SendPropertyChanged("DIEM");
					this.OnDIEMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BANGDIEMMON_CT_DIEMMON", Storage="_BANGDIEMMON", ThisKey="MABANGDIEMMON", OtherKey="MABANGDIEMMON", IsForeignKey=true)]
		public BANGDIEMMON BANGDIEMMON
		{
			get
			{
				return this._BANGDIEMMON.Entity;
			}
			set
			{
				BANGDIEMMON previousValue = this._BANGDIEMMON.Entity;
				if (((previousValue != value) 
							|| (this._BANGDIEMMON.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BANGDIEMMON.Entity = null;
						previousValue.CT_DIEMMONs.Remove(this);
					}
					this._BANGDIEMMON.Entity = value;
					if ((value != null))
					{
						value.CT_DIEMMONs.Add(this);
						this._MABANGDIEMMON = value.MABANGDIEMMON;
					}
					else
					{
						this._MABANGDIEMMON = default(string);
					}
					this.SendPropertyChanged("BANGDIEMMON");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIHINHKIEMTRA_CT_DIEMMON", Storage="_LOAIHINHKIEMTRA", ThisKey="MALHKT", OtherKey="MALHKT", IsForeignKey=true)]
		public LOAIHINHKIEMTRA LOAIHINHKIEMTRA
		{
			get
			{
				return this._LOAIHINHKIEMTRA.Entity;
			}
			set
			{
				LOAIHINHKIEMTRA previousValue = this._LOAIHINHKIEMTRA.Entity;
				if (((previousValue != value) 
							|| (this._LOAIHINHKIEMTRA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOAIHINHKIEMTRA.Entity = null;
						previousValue.CT_DIEMMONs.Remove(this);
					}
					this._LOAIHINHKIEMTRA.Entity = value;
					if ((value != null))
					{
						value.CT_DIEMMONs.Add(this);
						this._MALHKT = value.MALHKT;
					}
					else
					{
						this._MALHKT = default(string);
					}
					this.SendPropertyChanged("LOAIHINHKIEMTRA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOCKY")]
	public partial class HOCKY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAHK;
		
		private string _HOCKY1;
		
		private string _MANAM;
		
		private EntitySet<BAOCAOTONGKETHK> _BAOCAOTONGKETHKs;
		
		private EntitySet<BAOCAOTONGKETMON> _BAOCAOTONGKETMONs;
		
		private EntitySet<QUATRINHHOC> _QUATRINHHOCs;
		
		private EntityRef<NAMHOC> _NAMHOC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAHKChanging(string value);
    partial void OnMAHKChanged();
    partial void OnHOCKY1Changing(string value);
    partial void OnHOCKY1Changed();
    partial void OnMANAMChanging(string value);
    partial void OnMANAMChanged();
    #endregion
		
		public HOCKY()
		{
			this._BAOCAOTONGKETHKs = new EntitySet<BAOCAOTONGKETHK>(new Action<BAOCAOTONGKETHK>(this.attach_BAOCAOTONGKETHKs), new Action<BAOCAOTONGKETHK>(this.detach_BAOCAOTONGKETHKs));
			this._BAOCAOTONGKETMONs = new EntitySet<BAOCAOTONGKETMON>(new Action<BAOCAOTONGKETMON>(this.attach_BAOCAOTONGKETMONs), new Action<BAOCAOTONGKETMON>(this.detach_BAOCAOTONGKETMONs));
			this._QUATRINHHOCs = new EntitySet<QUATRINHHOC>(new Action<QUATRINHHOC>(this.attach_QUATRINHHOCs), new Action<QUATRINHHOC>(this.detach_QUATRINHHOCs));
			this._NAMHOC = default(EntityRef<NAMHOC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHK", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAHK
		{
			get
			{
				return this._MAHK;
			}
			set
			{
				if ((this._MAHK != value))
				{
					this.OnMAHKChanging(value);
					this.SendPropertyChanging();
					this._MAHK = value;
					this.SendPropertyChanged("MAHK");
					this.OnMAHKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="HOCKY", Storage="_HOCKY1", DbType="NVarChar(50)")]
		public string HOCKY1
		{
			get
			{
				return this._HOCKY1;
			}
			set
			{
				if ((this._HOCKY1 != value))
				{
					this.OnHOCKY1Changing(value);
					this.SendPropertyChanging();
					this._HOCKY1 = value;
					this.SendPropertyChanged("HOCKY1");
					this.OnHOCKY1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MANAM", DbType="NVarChar(50)")]
		public string MANAM
		{
			get
			{
				return this._MANAM;
			}
			set
			{
				if ((this._MANAM != value))
				{
					if (this._NAMHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMANAMChanging(value);
					this.SendPropertyChanging();
					this._MANAM = value;
					this.SendPropertyChanged("MANAM");
					this.OnMANAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKY_BAOCAOTONGKETHK", Storage="_BAOCAOTONGKETHKs", ThisKey="MAHK", OtherKey="MAHK")]
		public EntitySet<BAOCAOTONGKETHK> BAOCAOTONGKETHKs
		{
			get
			{
				return this._BAOCAOTONGKETHKs;
			}
			set
			{
				this._BAOCAOTONGKETHKs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKY_BAOCAOTONGKETMON", Storage="_BAOCAOTONGKETMONs", ThisKey="MAHK", OtherKey="MAHOCKY")]
		public EntitySet<BAOCAOTONGKETMON> BAOCAOTONGKETMONs
		{
			get
			{
				return this._BAOCAOTONGKETMONs;
			}
			set
			{
				this._BAOCAOTONGKETMONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKY_QUATRINHHOC", Storage="_QUATRINHHOCs", ThisKey="MAHK", OtherKey="MAHK")]
		public EntitySet<QUATRINHHOC> QUATRINHHOCs
		{
			get
			{
				return this._QUATRINHHOCs;
			}
			set
			{
				this._QUATRINHHOCs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAMHOC_HOCKY", Storage="_NAMHOC", ThisKey="MANAM", OtherKey="MANAM", IsForeignKey=true)]
		public NAMHOC NAMHOC
		{
			get
			{
				return this._NAMHOC.Entity;
			}
			set
			{
				NAMHOC previousValue = this._NAMHOC.Entity;
				if (((previousValue != value) 
							|| (this._NAMHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAMHOC.Entity = null;
						previousValue.HOCKies.Remove(this);
					}
					this._NAMHOC.Entity = value;
					if ((value != null))
					{
						value.HOCKies.Add(this);
						this._MANAM = value.MANAM;
					}
					else
					{
						this._MANAM = default(string);
					}
					this.SendPropertyChanged("NAMHOC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BAOCAOTONGKETHKs(BAOCAOTONGKETHK entity)
		{
			this.SendPropertyChanging();
			entity.HOCKY = this;
		}
		
		private void detach_BAOCAOTONGKETHKs(BAOCAOTONGKETHK entity)
		{
			this.SendPropertyChanging();
			entity.HOCKY = null;
		}
		
		private void attach_BAOCAOTONGKETMONs(BAOCAOTONGKETMON entity)
		{
			this.SendPropertyChanging();
			entity.HOCKY = this;
		}
		
		private void detach_BAOCAOTONGKETMONs(BAOCAOTONGKETMON entity)
		{
			this.SendPropertyChanging();
			entity.HOCKY = null;
		}
		
		private void attach_QUATRINHHOCs(QUATRINHHOC entity)
		{
			this.SendPropertyChanging();
			entity.HOCKY = this;
		}
		
		private void detach_QUATRINHHOCs(QUATRINHHOC entity)
		{
			this.SendPropertyChanging();
			entity.HOCKY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOCSINH")]
	public partial class HOCSINH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAHS;
		
		private string _HOTEN;
		
		private string _GIOITINH;
		
		private System.Nullable<System.DateTime> _NGAYSINH;
		
		private string _DIACHI;
		
		private string _EMAIL;
		
		private EntitySet<QUATRINHHOC> _QUATRINHHOCs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAHSChanging(string value);
    partial void OnMAHSChanged();
    partial void OnHOTENChanging(string value);
    partial void OnHOTENChanged();
    partial void OnGIOITINHChanging(string value);
    partial void OnGIOITINHChanged();
    partial void OnNGAYSINHChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYSINHChanged();
    partial void OnDIACHIChanging(string value);
    partial void OnDIACHIChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    #endregion
		
		public HOCSINH()
		{
			this._QUATRINHHOCs = new EntitySet<QUATRINHHOC>(new Action<QUATRINHHOC>(this.attach_QUATRINHHOCs), new Action<QUATRINHHOC>(this.detach_QUATRINHHOCs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHS", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAHS
		{
			get
			{
				return this._MAHS;
			}
			set
			{
				if ((this._MAHS != value))
				{
					this.OnMAHSChanging(value);
					this.SendPropertyChanging();
					this._MAHS = value;
					this.SendPropertyChanged("MAHS");
					this.OnMAHSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOTEN", DbType="NVarChar(50)")]
		public string HOTEN
		{
			get
			{
				return this._HOTEN;
			}
			set
			{
				if ((this._HOTEN != value))
				{
					this.OnHOTENChanging(value);
					this.SendPropertyChanging();
					this._HOTEN = value;
					this.SendPropertyChanged("HOTEN");
					this.OnHOTENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIOITINH", DbType="NVarChar(50)")]
		public string GIOITINH
		{
			get
			{
				return this._GIOITINH;
			}
			set
			{
				if ((this._GIOITINH != value))
				{
					this.OnGIOITINHChanging(value);
					this.SendPropertyChanging();
					this._GIOITINH = value;
					this.SendPropertyChanged("GIOITINH");
					this.OnGIOITINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYSINH", DbType="DateTime")]
		public System.Nullable<System.DateTime> NGAYSINH
		{
			get
			{
				return this._NGAYSINH;
			}
			set
			{
				if ((this._NGAYSINH != value))
				{
					this.OnNGAYSINHChanging(value);
					this.SendPropertyChanging();
					this._NGAYSINH = value;
					this.SendPropertyChanged("NGAYSINH");
					this.OnNGAYSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIACHI", DbType="NVarChar(50)")]
		public string DIACHI
		{
			get
			{
				return this._DIACHI;
			}
			set
			{
				if ((this._DIACHI != value))
				{
					this.OnDIACHIChanging(value);
					this.SendPropertyChanging();
					this._DIACHI = value;
					this.SendPropertyChanged("DIACHI");
					this.OnDIACHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="NVarChar(50)")]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCSINH_QUATRINHHOC", Storage="_QUATRINHHOCs", ThisKey="MAHS", OtherKey="MAHS")]
		public EntitySet<QUATRINHHOC> QUATRINHHOCs
		{
			get
			{
				return this._QUATRINHHOCs;
			}
			set
			{
				this._QUATRINHHOCs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QUATRINHHOCs(QUATRINHHOC entity)
		{
			this.SendPropertyChanging();
			entity.HOCSINH = this;
		}
		
		private void detach_QUATRINHHOCs(QUATRINHHOC entity)
		{
			this.SendPropertyChanging();
			entity.HOCSINH = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KHOILOP")]
	public partial class KHOILOP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAKHOI;
		
		private string _MANAM;
		
		private string _TENKHOI;
		
		private string _KHOI;
		
		private System.Nullable<int> _SOLOP;
		
		private EntitySet<LOP> _LOPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAKHOIChanging(string value);
    partial void OnMAKHOIChanged();
    partial void OnMANAMChanging(string value);
    partial void OnMANAMChanged();
    partial void OnTENKHOIChanging(string value);
    partial void OnTENKHOIChanged();
    partial void OnKHOIChanging(string value);
    partial void OnKHOIChanged();
    partial void OnSOLOPChanging(System.Nullable<int> value);
    partial void OnSOLOPChanged();
    #endregion
		
		public KHOILOP()
		{
			this._LOPs = new EntitySet<LOP>(new Action<LOP>(this.attach_LOPs), new Action<LOP>(this.detach_LOPs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAKHOI", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAKHOI
		{
			get
			{
				return this._MAKHOI;
			}
			set
			{
				if ((this._MAKHOI != value))
				{
					this.OnMAKHOIChanging(value);
					this.SendPropertyChanging();
					this._MAKHOI = value;
					this.SendPropertyChanged("MAKHOI");
					this.OnMAKHOIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MANAM", DbType="NVarChar(50)")]
		public string MANAM
		{
			get
			{
				return this._MANAM;
			}
			set
			{
				if ((this._MANAM != value))
				{
					this.OnMANAMChanging(value);
					this.SendPropertyChanging();
					this._MANAM = value;
					this.SendPropertyChanged("MANAM");
					this.OnMANAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENKHOI", DbType="NVarChar(50)")]
		public string TENKHOI
		{
			get
			{
				return this._TENKHOI;
			}
			set
			{
				if ((this._TENKHOI != value))
				{
					this.OnTENKHOIChanging(value);
					this.SendPropertyChanging();
					this._TENKHOI = value;
					this.SendPropertyChanged("TENKHOI");
					this.OnTENKHOIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KHOI", DbType="NChar(10)")]
		public string KHOI
		{
			get
			{
				return this._KHOI;
			}
			set
			{
				if ((this._KHOI != value))
				{
					this.OnKHOIChanging(value);
					this.SendPropertyChanging();
					this._KHOI = value;
					this.SendPropertyChanged("KHOI");
					this.OnKHOIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOLOP", DbType="Int")]
		public System.Nullable<int> SOLOP
		{
			get
			{
				return this._SOLOP;
			}
			set
			{
				if ((this._SOLOP != value))
				{
					this.OnSOLOPChanging(value);
					this.SendPropertyChanging();
					this._SOLOP = value;
					this.SendPropertyChanged("SOLOP");
					this.OnSOLOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KHOILOP_LOP", Storage="_LOPs", ThisKey="MAKHOI", OtherKey="MAKHOI")]
		public EntitySet<LOP> LOPs
		{
			get
			{
				return this._LOPs;
			}
			set
			{
				this._LOPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LOPs(LOP entity)
		{
			this.SendPropertyChanging();
			entity.KHOILOP = this;
		}
		
		private void detach_LOPs(LOP entity)
		{
			this.SendPropertyChanging();
			entity.KHOILOP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOAIHINHKIEMTRA")]
	public partial class LOAIHINHKIEMTRA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MALHKT;
		
		private string _TENLHKT;
		
		private System.Nullable<int> _HESO;
		
		private EntitySet<CT_DIEMMON> _CT_DIEMMONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMALHKTChanging(string value);
    partial void OnMALHKTChanged();
    partial void OnTENLHKTChanging(string value);
    partial void OnTENLHKTChanged();
    partial void OnHESOChanging(System.Nullable<int> value);
    partial void OnHESOChanged();
    #endregion
		
		public LOAIHINHKIEMTRA()
		{
			this._CT_DIEMMONs = new EntitySet<CT_DIEMMON>(new Action<CT_DIEMMON>(this.attach_CT_DIEMMONs), new Action<CT_DIEMMON>(this.detach_CT_DIEMMONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALHKT", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALHKT
		{
			get
			{
				return this._MALHKT;
			}
			set
			{
				if ((this._MALHKT != value))
				{
					this.OnMALHKTChanging(value);
					this.SendPropertyChanging();
					this._MALHKT = value;
					this.SendPropertyChanged("MALHKT");
					this.OnMALHKTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLHKT", DbType="NVarChar(50)")]
		public string TENLHKT
		{
			get
			{
				return this._TENLHKT;
			}
			set
			{
				if ((this._TENLHKT != value))
				{
					this.OnTENLHKTChanging(value);
					this.SendPropertyChanging();
					this._TENLHKT = value;
					this.SendPropertyChanged("TENLHKT");
					this.OnTENLHKTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HESO", DbType="Int")]
		public System.Nullable<int> HESO
		{
			get
			{
				return this._HESO;
			}
			set
			{
				if ((this._HESO != value))
				{
					this.OnHESOChanging(value);
					this.SendPropertyChanging();
					this._HESO = value;
					this.SendPropertyChanged("HESO");
					this.OnHESOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIHINHKIEMTRA_CT_DIEMMON", Storage="_CT_DIEMMONs", ThisKey="MALHKT", OtherKey="MALHKT")]
		public EntitySet<CT_DIEMMON> CT_DIEMMONs
		{
			get
			{
				return this._CT_DIEMMONs;
			}
			set
			{
				this._CT_DIEMMONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CT_DIEMMONs(CT_DIEMMON entity)
		{
			this.SendPropertyChanging();
			entity.LOAIHINHKIEMTRA = this;
		}
		
		private void detach_CT_DIEMMONs(CT_DIEMMON entity)
		{
			this.SendPropertyChanging();
			entity.LOAIHINHKIEMTRA = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOP")]
	public partial class LOP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MALOP;
		
		private string _TENLOP;
		
		private string _MAKHOI;
		
		private System.Nullable<int> _SISO;
		
		private EntitySet<BAOCAOTONGKETHK> _BAOCAOTONGKETHKs;
		
		private EntitySet<CT_BCTKMON> _CT_BCTKMONs;
		
		private EntitySet<QUATRINHHOC> _QUATRINHHOCs;
		
		private EntityRef<KHOILOP> _KHOILOP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMALOPChanging(string value);
    partial void OnMALOPChanged();
    partial void OnTENLOPChanging(string value);
    partial void OnTENLOPChanged();
    partial void OnMAKHOIChanging(string value);
    partial void OnMAKHOIChanged();
    partial void OnSISOChanging(System.Nullable<int> value);
    partial void OnSISOChanged();
    #endregion
		
		public LOP()
		{
			this._BAOCAOTONGKETHKs = new EntitySet<BAOCAOTONGKETHK>(new Action<BAOCAOTONGKETHK>(this.attach_BAOCAOTONGKETHKs), new Action<BAOCAOTONGKETHK>(this.detach_BAOCAOTONGKETHKs));
			this._CT_BCTKMONs = new EntitySet<CT_BCTKMON>(new Action<CT_BCTKMON>(this.attach_CT_BCTKMONs), new Action<CT_BCTKMON>(this.detach_CT_BCTKMONs));
			this._QUATRINHHOCs = new EntitySet<QUATRINHHOC>(new Action<QUATRINHHOC>(this.attach_QUATRINHHOCs), new Action<QUATRINHHOC>(this.detach_QUATRINHHOCs));
			this._KHOILOP = default(EntityRef<KHOILOP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLOP", DbType="NVarChar(50)")]
		public string TENLOP
		{
			get
			{
				return this._TENLOP;
			}
			set
			{
				if ((this._TENLOP != value))
				{
					this.OnTENLOPChanging(value);
					this.SendPropertyChanging();
					this._TENLOP = value;
					this.SendPropertyChanged("TENLOP");
					this.OnTENLOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAKHOI", DbType="NVarChar(50)")]
		public string MAKHOI
		{
			get
			{
				return this._MAKHOI;
			}
			set
			{
				if ((this._MAKHOI != value))
				{
					if (this._KHOILOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAKHOIChanging(value);
					this.SendPropertyChanging();
					this._MAKHOI = value;
					this.SendPropertyChanged("MAKHOI");
					this.OnMAKHOIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SISO", DbType="Int")]
		public System.Nullable<int> SISO
		{
			get
			{
				return this._SISO;
			}
			set
			{
				if ((this._SISO != value))
				{
					this.OnSISOChanging(value);
					this.SendPropertyChanging();
					this._SISO = value;
					this.SendPropertyChanged("SISO");
					this.OnSISOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_BAOCAOTONGKETHK", Storage="_BAOCAOTONGKETHKs", ThisKey="MALOP", OtherKey="MALOP")]
		public EntitySet<BAOCAOTONGKETHK> BAOCAOTONGKETHKs
		{
			get
			{
				return this._BAOCAOTONGKETHKs;
			}
			set
			{
				this._BAOCAOTONGKETHKs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_CT_BCTKMON", Storage="_CT_BCTKMONs", ThisKey="MALOP", OtherKey="MALOP")]
		public EntitySet<CT_BCTKMON> CT_BCTKMONs
		{
			get
			{
				return this._CT_BCTKMONs;
			}
			set
			{
				this._CT_BCTKMONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_QUATRINHHOC", Storage="_QUATRINHHOCs", ThisKey="MALOP", OtherKey="MALOP")]
		public EntitySet<QUATRINHHOC> QUATRINHHOCs
		{
			get
			{
				return this._QUATRINHHOCs;
			}
			set
			{
				this._QUATRINHHOCs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KHOILOP_LOP", Storage="_KHOILOP", ThisKey="MAKHOI", OtherKey="MAKHOI", IsForeignKey=true)]
		public KHOILOP KHOILOP
		{
			get
			{
				return this._KHOILOP.Entity;
			}
			set
			{
				KHOILOP previousValue = this._KHOILOP.Entity;
				if (((previousValue != value) 
							|| (this._KHOILOP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KHOILOP.Entity = null;
						previousValue.LOPs.Remove(this);
					}
					this._KHOILOP.Entity = value;
					if ((value != null))
					{
						value.LOPs.Add(this);
						this._MAKHOI = value.MAKHOI;
					}
					else
					{
						this._MAKHOI = default(string);
					}
					this.SendPropertyChanged("KHOILOP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BAOCAOTONGKETHKs(BAOCAOTONGKETHK entity)
		{
			this.SendPropertyChanging();
			entity.LOP = this;
		}
		
		private void detach_BAOCAOTONGKETHKs(BAOCAOTONGKETHK entity)
		{
			this.SendPropertyChanging();
			entity.LOP = null;
		}
		
		private void attach_CT_BCTKMONs(CT_BCTKMON entity)
		{
			this.SendPropertyChanging();
			entity.LOP = this;
		}
		
		private void detach_CT_BCTKMONs(CT_BCTKMON entity)
		{
			this.SendPropertyChanging();
			entity.LOP = null;
		}
		
		private void attach_QUATRINHHOCs(QUATRINHHOC entity)
		{
			this.SendPropertyChanging();
			entity.LOP = this;
		}
		
		private void detach_QUATRINHHOCs(QUATRINHHOC entity)
		{
			this.SendPropertyChanging();
			entity.LOP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MONHOC")]
	public partial class MONHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAMONHOC;
		
		private string _TEMMONHOC;
		
		private EntitySet<BANGDIEMMON> _BANGDIEMMONs;
		
		private EntitySet<BAOCAOTONGKETMON> _BAOCAOTONGKETMONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAMONHOCChanging(string value);
    partial void OnMAMONHOCChanged();
    partial void OnTEMMONHOCChanging(string value);
    partial void OnTEMMONHOCChanged();
    #endregion
		
		public MONHOC()
		{
			this._BANGDIEMMONs = new EntitySet<BANGDIEMMON>(new Action<BANGDIEMMON>(this.attach_BANGDIEMMONs), new Action<BANGDIEMMON>(this.detach_BANGDIEMMONs));
			this._BAOCAOTONGKETMONs = new EntitySet<BAOCAOTONGKETMON>(new Action<BAOCAOTONGKETMON>(this.attach_BAOCAOTONGKETMONs), new Action<BAOCAOTONGKETMON>(this.detach_BAOCAOTONGKETMONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMONHOC", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAMONHOC
		{
			get
			{
				return this._MAMONHOC;
			}
			set
			{
				if ((this._MAMONHOC != value))
				{
					this.OnMAMONHOCChanging(value);
					this.SendPropertyChanging();
					this._MAMONHOC = value;
					this.SendPropertyChanged("MAMONHOC");
					this.OnMAMONHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TEMMONHOC", DbType="NVarChar(50)")]
		public string TEMMONHOC
		{
			get
			{
				return this._TEMMONHOC;
			}
			set
			{
				if ((this._TEMMONHOC != value))
				{
					this.OnTEMMONHOCChanging(value);
					this.SendPropertyChanging();
					this._TEMMONHOC = value;
					this.SendPropertyChanged("TEMMONHOC");
					this.OnTEMMONHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_BANGDIEMMON", Storage="_BANGDIEMMONs", ThisKey="MAMONHOC", OtherKey="MAMONHOC")]
		public EntitySet<BANGDIEMMON> BANGDIEMMONs
		{
			get
			{
				return this._BANGDIEMMONs;
			}
			set
			{
				this._BANGDIEMMONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_BAOCAOTONGKETMON", Storage="_BAOCAOTONGKETMONs", ThisKey="MAMONHOC", OtherKey="MAMONHOC")]
		public EntitySet<BAOCAOTONGKETMON> BAOCAOTONGKETMONs
		{
			get
			{
				return this._BAOCAOTONGKETMONs;
			}
			set
			{
				this._BAOCAOTONGKETMONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BANGDIEMMONs(BANGDIEMMON entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = this;
		}
		
		private void detach_BANGDIEMMONs(BANGDIEMMON entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = null;
		}
		
		private void attach_BAOCAOTONGKETMONs(BAOCAOTONGKETMON entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = this;
		}
		
		private void detach_BAOCAOTONGKETMONs(BAOCAOTONGKETMON entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NAMHOC")]
	public partial class NAMHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MANAM;
		
		private System.Nullable<int> _NAM1;
		
		private System.Nullable<int> _NAM2;
		
		private EntitySet<HOCKY> _HOCKies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMANAMChanging(string value);
    partial void OnMANAMChanged();
    partial void OnNAM1Changing(System.Nullable<int> value);
    partial void OnNAM1Changed();
    partial void OnNAM2Changing(System.Nullable<int> value);
    partial void OnNAM2Changed();
    #endregion
		
		public NAMHOC()
		{
			this._HOCKies = new EntitySet<HOCKY>(new Action<HOCKY>(this.attach_HOCKies), new Action<HOCKY>(this.detach_HOCKies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MANAM", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MANAM
		{
			get
			{
				return this._MANAM;
			}
			set
			{
				if ((this._MANAM != value))
				{
					this.OnMANAMChanging(value);
					this.SendPropertyChanging();
					this._MANAM = value;
					this.SendPropertyChanged("MANAM");
					this.OnMANAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAM1", DbType="Int")]
		public System.Nullable<int> NAM1
		{
			get
			{
				return this._NAM1;
			}
			set
			{
				if ((this._NAM1 != value))
				{
					this.OnNAM1Changing(value);
					this.SendPropertyChanging();
					this._NAM1 = value;
					this.SendPropertyChanged("NAM1");
					this.OnNAM1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAM2", DbType="Int")]
		public System.Nullable<int> NAM2
		{
			get
			{
				return this._NAM2;
			}
			set
			{
				if ((this._NAM2 != value))
				{
					this.OnNAM2Changing(value);
					this.SendPropertyChanging();
					this._NAM2 = value;
					this.SendPropertyChanged("NAM2");
					this.OnNAM2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAMHOC_HOCKY", Storage="_HOCKies", ThisKey="MANAM", OtherKey="MANAM")]
		public EntitySet<HOCKY> HOCKies
		{
			get
			{
				return this._HOCKies;
			}
			set
			{
				this._HOCKies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HOCKies(HOCKY entity)
		{
			this.SendPropertyChanging();
			entity.NAMHOC = this;
		}
		
		private void detach_HOCKies(HOCKY entity)
		{
			this.SendPropertyChanging();
			entity.NAMHOC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QUATRINHHOC")]
	public partial class QUATRINHHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MAQTHOC;
		
		private string _MAHS;
		
		private string _MALOP;
		
		private string _MAHK;
		
		private System.Nullable<float> _DIEMTBHK;
		
		private EntitySet<BANGDIEMMON> _BANGDIEMMONs;
		
		private EntityRef<HOCKY> _HOCKY;
		
		private EntityRef<HOCSINH> _HOCSINH;
		
		private EntityRef<LOP> _LOP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAQTHOCChanging(string value);
    partial void OnMAQTHOCChanged();
    partial void OnMAHSChanging(string value);
    partial void OnMAHSChanged();
    partial void OnMALOPChanging(string value);
    partial void OnMALOPChanged();
    partial void OnMAHKChanging(string value);
    partial void OnMAHKChanged();
    partial void OnDIEMTBHKChanging(System.Nullable<float> value);
    partial void OnDIEMTBHKChanged();
    #endregion
		
		public QUATRINHHOC()
		{
			this._BANGDIEMMONs = new EntitySet<BANGDIEMMON>(new Action<BANGDIEMMON>(this.attach_BANGDIEMMONs), new Action<BANGDIEMMON>(this.detach_BANGDIEMMONs));
			this._HOCKY = default(EntityRef<HOCKY>);
			this._HOCSINH = default(EntityRef<HOCSINH>);
			this._LOP = default(EntityRef<LOP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAQTHOC", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAQTHOC
		{
			get
			{
				return this._MAQTHOC;
			}
			set
			{
				if ((this._MAQTHOC != value))
				{
					this.OnMAQTHOCChanging(value);
					this.SendPropertyChanging();
					this._MAQTHOC = value;
					this.SendPropertyChanged("MAQTHOC");
					this.OnMAQTHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHS", DbType="NVarChar(50)")]
		public string MAHS
		{
			get
			{
				return this._MAHS;
			}
			set
			{
				if ((this._MAHS != value))
				{
					if (this._HOCSINH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAHSChanging(value);
					this.SendPropertyChanging();
					this._MAHS = value;
					this.SendPropertyChanged("MAHS");
					this.OnMAHSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="NVarChar(50)")]
		public string MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					if (this._LOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHK", DbType="NVarChar(50)")]
		public string MAHK
		{
			get
			{
				return this._MAHK;
			}
			set
			{
				if ((this._MAHK != value))
				{
					if (this._HOCKY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAHKChanging(value);
					this.SendPropertyChanging();
					this._MAHK = value;
					this.SendPropertyChanged("MAHK");
					this.OnMAHKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIEMTBHK", DbType="Real")]
		public System.Nullable<float> DIEMTBHK
		{
			get
			{
				return this._DIEMTBHK;
			}
			set
			{
				if ((this._DIEMTBHK != value))
				{
					this.OnDIEMTBHKChanging(value);
					this.SendPropertyChanging();
					this._DIEMTBHK = value;
					this.SendPropertyChanged("DIEMTBHK");
					this.OnDIEMTBHKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUATRINHHOC_BANGDIEMMON", Storage="_BANGDIEMMONs", ThisKey="MAQTHOC", OtherKey="MAQTHOC")]
		public EntitySet<BANGDIEMMON> BANGDIEMMONs
		{
			get
			{
				return this._BANGDIEMMONs;
			}
			set
			{
				this._BANGDIEMMONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKY_QUATRINHHOC", Storage="_HOCKY", ThisKey="MAHK", OtherKey="MAHK", IsForeignKey=true)]
		public HOCKY HOCKY
		{
			get
			{
				return this._HOCKY.Entity;
			}
			set
			{
				HOCKY previousValue = this._HOCKY.Entity;
				if (((previousValue != value) 
							|| (this._HOCKY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOCKY.Entity = null;
						previousValue.QUATRINHHOCs.Remove(this);
					}
					this._HOCKY.Entity = value;
					if ((value != null))
					{
						value.QUATRINHHOCs.Add(this);
						this._MAHK = value.MAHK;
					}
					else
					{
						this._MAHK = default(string);
					}
					this.SendPropertyChanged("HOCKY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCSINH_QUATRINHHOC", Storage="_HOCSINH", ThisKey="MAHS", OtherKey="MAHS", IsForeignKey=true)]
		public HOCSINH HOCSINH
		{
			get
			{
				return this._HOCSINH.Entity;
			}
			set
			{
				HOCSINH previousValue = this._HOCSINH.Entity;
				if (((previousValue != value) 
							|| (this._HOCSINH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOCSINH.Entity = null;
						previousValue.QUATRINHHOCs.Remove(this);
					}
					this._HOCSINH.Entity = value;
					if ((value != null))
					{
						value.QUATRINHHOCs.Add(this);
						this._MAHS = value.MAHS;
					}
					else
					{
						this._MAHS = default(string);
					}
					this.SendPropertyChanged("HOCSINH");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOP_QUATRINHHOC", Storage="_LOP", ThisKey="MALOP", OtherKey="MALOP", IsForeignKey=true)]
		public LOP LOP
		{
			get
			{
				return this._LOP.Entity;
			}
			set
			{
				LOP previousValue = this._LOP.Entity;
				if (((previousValue != value) 
							|| (this._LOP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOP.Entity = null;
						previousValue.QUATRINHHOCs.Remove(this);
					}
					this._LOP.Entity = value;
					if ((value != null))
					{
						value.QUATRINHHOCs.Add(this);
						this._MALOP = value.MALOP;
					}
					else
					{
						this._MALOP = default(string);
					}
					this.SendPropertyChanged("LOP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BANGDIEMMONs(BANGDIEMMON entity)
		{
			this.SendPropertyChanging();
			entity.QUATRINHHOC = this;
		}
		
		private void detach_BANGDIEMMONs(BANGDIEMMON entity)
		{
			this.SendPropertyChanging();
			entity.QUATRINHHOC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.THAMSO")]
	public partial class THAMSO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TENTHAMSO;
		
		private System.Nullable<int> _GIATRI;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTENTHAMSOChanging(string value);
    partial void OnTENTHAMSOChanged();
    partial void OnGIATRIChanging(System.Nullable<int> value);
    partial void OnGIATRIChanged();
    #endregion
		
		public THAMSO()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENTHAMSO", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TENTHAMSO
		{
			get
			{
				return this._TENTHAMSO;
			}
			set
			{
				if ((this._TENTHAMSO != value))
				{
					this.OnTENTHAMSOChanging(value);
					this.SendPropertyChanging();
					this._TENTHAMSO = value;
					this.SendPropertyChanged("TENTHAMSO");
					this.OnTENTHAMSOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIATRI", DbType="Int")]
		public System.Nullable<int> GIATRI
		{
			get
			{
				return this._GIATRI;
			}
			set
			{
				if ((this._GIATRI != value))
				{
					this.OnGIATRIChanging(value);
					this.SendPropertyChanging();
					this._GIATRI = value;
					this.SendPropertyChanged("GIATRI");
					this.OnGIATRIChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
